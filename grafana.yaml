# kubectl create serviceaccount developer
# kubectl create clusterrolebinding developer-binding --clusterrole=cluster-admin --serviceaccount=default:developer
# kubectl create secret generic developer-key --from-file=key.json=service-account.json
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: developer-key
# type: Opaque
# data:
#   FLAG: ZmxhZ3syODgyMzJiMmYwM2IxZWM0MjJjNWRhZTUwZjE0MDYxZn0K
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  labels:
    app: grafana
    service: grafana-service
spec:
  ports:
    - port: 3000
  selector:
    app: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: default
  annotations:
    kubernetes.io/service-account.name: developer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      volumes:
      - name: service-account-key
        secret:
          secretName: developer-key
      containers:
      - name: grafana
        image: grafana/grafana-enterprise:8.3.0-beta2
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: service-account-key
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        envFrom:
        - secretRef:
            name: developer-key
        ports:
        - containerPort: 3000
          protocol: TCP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: developer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      serviceAccountName: developer
      containers:
      - name: grafana
        image: grafana/grafana-enterprise:8.3.0-beta2
        imagePullPolicy: IfNotPresent
        envFrom:
          - secretRef:
              name: grafana-secret
        ports:
        - containerPort: 3000
          protocol: TCP
