# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: developer
#   namespace: default
#   annotations:
#     kubernetes.io/service-account.auto-generated: "true"
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   namespace: default
#   name: pod-viewer-role
# rules:
# - apiGroups: [""]
#   resources: ["pods","pods/exec"]
#   verbs: ["get", "list", "watch", "create"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: pod-viewer-binding
#   namespace: default
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: pod-viewer-role
# subjects:
# - kind: ServiceAccount
#   name: developer
#   namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  labels:
    app: grafana
    service: grafana-service
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      version: v1
  template:
    metadata:
      labels:
        app: grafana
        version: v1
    spec:
      serviceAccountName: developer
      containers:
      - name: grafana
        image: grafana/grafana-enterprise:8.3.0-beta2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: developer
  namespace: default
  annotations:
    kubernetes.io/service-account-auto-created: "true"
    kubernetes.io/service-account.name: developer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: developer-clusterbinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: developer
  namespace: default
---